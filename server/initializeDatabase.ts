import { db, pool } from './db';
import { sql } from 'drizzle-orm';
import { users, agents, agentPrompts } from '@shared/schema';
import { eq } from 'drizzle-orm';
import { hashPassword } from './auth';

// Vari√°vel para indicar se j√° tentamos inicializar o banco
let databaseInitialized = false;

/**
 * Verifica se a tabela especificada existe no banco de dados
 */
async function checkTableExists(tableName: string): Promise<boolean> {
  // N√∫mero m√°ximo de tentativas para verificar a tabela
  const maxRetries = 3;
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      const result = await pool.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public'
          AND table_name = $1
        );
      `, [tableName]);
      
      return result.rows[0].exists;
    } catch (error) {
      retries++;
      console.error(`Erro ao verificar se a tabela ${tableName} existe (tentativa ${retries}/${maxRetries}):`, error);
      
      if (retries >= maxRetries) {
        console.error(`N√∫mero m√°ximo de tentativas atingido ao verificar tabela '${tableName}'.`);
        return false;
      }
      
      // Aguarda um pouco antes de tentar novamente
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  return false;
}

/**
 * Cria as tabelas do schema manualmente se necess√°rio
 */
async function createTablesIfNotExist() {
  try {
    // Verifica se a tabela de usu√°rios existe
    const usersTableExists = await checkTableExists('users');
    
    if (!usersTableExists) {
      console.log('üîß Criando tabelas do banco de dados...');
      
      // Cria√ß√£o da tabela users
      await pool.query(`
        CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username TEXT NOT NULL UNIQUE,
          password TEXT NOT NULL,
          "isAdmin" BOOLEAN NOT NULL DEFAULT false,
          "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      // Cria√ß√£o da tabela agents
      await pool.query(`
        CREATE TABLE IF NOT EXISTS agents (
          id SERIAL PRIMARY KEY,
          title TEXT NOT NULL,
          description TEXT NOT NULL,
          icon TEXT NOT NULL,
          "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      // Cria√ß√£o da tabela agent_prompts
      await pool.query(`
        CREATE TABLE IF NOT EXISTS agent_prompts (
          id SERIAL PRIMARY KEY,
          "agentId" INTEGER NOT NULL REFERENCES agents(id) ON DELETE CASCADE,
          prompt TEXT NOT NULL,
          "isActive" BOOLEAN NOT NULL DEFAULT false,
          "createdAt" TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        );
      `);
      
      console.log('‚úÖ Tabelas criadas com sucesso!');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao criar tabelas:', error);
    throw error;
  }
}

/**
 * Cria dados iniciais se as tabelas estiverem vazias
 */
async function seedInitialData() {
  try {
    // Verifica se j√° existem usu√°rios
    const existingUsers = await db.select().from(users);
    
    if (existingUsers.length === 0) {
      console.log('üå± Populando banco de dados com dados iniciais...');
      
      // Cria usu√°rio admin
      const adminPassword = await hashPassword('admin');
      await db.insert(users).values({
        username: 'admin',
        password: adminPassword,
        isAdmin: true
      });
      
      // Lista de agentes
      const agentsList = [
        { title: 'Comercial', description: 'Assistente virtual para equipes comerciais e vendas', icon: 'fas fa-briefcase' },
        { title: 'Cl√≠nicas', description: 'Assistente especializado para cl√≠nicas e consult√≥rios m√©dicos', icon: 'fas fa-clinic-medical' },
        { title: 'Imobili√°rias', description: 'Assistente para corretores e profissionais do setor imobili√°rio', icon: 'fas fa-home' },
        { title: 'Jur√≠dico', description: 'Assistente virtual para escrit√≥rios de advocacia e profissionais da √°rea jur√≠dica', icon: 'fas fa-balance-scale' },
        { title: 'Financeiro', description: 'Assistente especializado em finan√ßas, contabilidade e planejamento financeiro', icon: 'fas fa-chart-line' },
        { title: 'Educa√ß√£o', description: 'Assistente virtual para institui√ß√µes de ensino e professores', icon: 'fas fa-graduation-cap' },
        { title: 'Restaurantes', description: 'Assistente para estabelecimentos gastron√¥micos e delivery', icon: 'fas fa-utensils' },
        { title: 'Eventos', description: 'Assistente especializado em organiza√ß√£o e promo√ß√£o de eventos', icon: 'fas fa-calendar-alt' },
        { title: 'Recursos Humanos', description: 'Assistente para recrutamento, sele√ß√£o e gest√£o de pessoas', icon: 'fas fa-users' },
        { title: 'Sa√∫de', description: 'Assistente virtual para profissionais da √°rea da sa√∫de', icon: 'fas fa-heartbeat' },
        { title: 'Varejo', description: 'Assistente especializado em lojas f√≠sicas e e-commerce', icon: 'fas fa-shopping-cart' },
        { title: 'Tecnologia', description: 'Assistente para empresas e profissionais de tecnologia', icon: 'fas fa-laptop-code' }
      ];
      
      // Insere os agentes
      for (const agent of agentsList) {
        await db.insert(agents).values(agent);
      }
      
      console.log('‚úÖ Dados iniciais criados com sucesso!');
    } else {
      console.log('‚ÑπÔ∏è Dados iniciais j√° existem no banco de dados.');
    }
  } catch (error) {
    console.error('‚ùå Erro ao criar dados iniciais:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o para tentar conectar ao banco de dados com tentativas
 * @param maxRetries N√∫mero m√°ximo de tentativas
 * @param retryDelay Intervalo entre tentativas em ms
 */
async function connectWithRetry(maxRetries = 10, retryDelay = 3000): Promise<boolean> {
  let retries = 0;
  
  // Imprime informa√ß√µes de conex√£o para debug
  console.log('üîç Tentando conectar ao banco de dados com estas configura√ß√µes:');
  console.log(`- DATABASE_URL: ${process.env.DATABASE_URL ? '***' + process.env.DATABASE_URL.substring(process.env.DATABASE_URL.indexOf('@')) : 'n√£o definido'}`);
  console.log(`- DB_HOST: ${process.env.DB_HOST || 'n√£o definido'}`);
  console.log(`- DB_PORT: ${process.env.DB_PORT || 'n√£o definido'}`);
  console.log(`- DB_USER: ${process.env.DB_USER || 'n√£o definido'}`);
  console.log(`- DB_NAME: ${process.env.DB_NAME || 'n√£o definido'}`);
  
  while (retries < maxRetries) {
    try {
      // Tenta uma consulta simples para verificar a conex√£o
      await pool.query('SELECT NOW()');
      console.log('‚úÖ Conex√£o com o banco de dados estabelecida!');
      return true;
    } catch (error: any) {
      retries++;
      console.error(`‚ùå Tentativa ${retries}/${maxRetries} falhou ao conectar ao banco:`, error?.message || 'Erro desconhecido');
      
      // Diagn√≥stico adicional
      if (error?.message?.includes('no pg_hba.conf entry')) {
        console.error('‚ö†Ô∏è Erro de autentica√ß√£o: Verifique as credenciais e permiss√µes do banco de dados.');
      } else if (error?.message?.includes('connect ECONNREFUSED')) {
        console.error('‚ö†Ô∏è Conex√£o recusada: O servidor de banco de dados pode n√£o estar acess√≠vel neste host/porta.');
      } else if (error?.message?.includes('database') && error?.message?.includes('does not exist')) {
        console.error('‚ö†Ô∏è O banco de dados especificado n√£o existe. Verifique o nome do banco e crie-o se necess√°rio.');
      }
      
      if (retries >= maxRetries) {
        console.error('‚ùå N√∫mero m√°ximo de tentativas atingido. N√£o foi poss√≠vel conectar ao banco de dados.');
        return false;
      }
      
      // Espera antes de tentar novamente com aumento exponencial do tempo
      const waitTime = retryDelay * Math.pow(1.5, retries - 1);
      console.log(`‚è≥ Aguardando ${waitTime/1000} segundos antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  return false;
}

/**
 * Inicializa o banco de dados
 */
export async function initializeDatabase() {
  // Se j√° tentamos inicializar antes, n√£o tente novamente
  if (databaseInitialized) {
    console.log('üîÑ Banco de dados j√° foi inicializado anteriormente.');
    return;
  }
  
  try {
    console.log('üîç Verificando banco de dados...');
    
    // Primeiro tenta conectar ao banco
    const connected = await connectWithRetry();
    if (!connected) {
      console.error('‚ùå N√£o foi poss√≠vel conectar ao banco de dados ap√≥s v√°rias tentativas.');
      return;
    }
    
    // Verifica e cria tabelas se necess√°rio
    const tablesCreated = await createTablesIfNotExist();
    
    // Se as tabelas foram criadas ou j√° existiam, verifica os dados iniciais
    await seedInitialData();
    
    console.log('‚úÖ Banco de dados inicializado com sucesso!');
    databaseInitialized = true;
  } catch (error: any) {
    console.error('‚ùå Falha ao inicializar banco de dados:', error);
    console.error('Detalhes do erro:', error instanceof Error ? error.message : String(error));
    console.error('Verifique se as vari√°veis de ambiente DATABASE_URL, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD e DB_NAME est√£o configuradas corretamente.');
    
    // N√£o lan√ßa exce√ß√£o para permitir que o servidor continue funcionando com opera√ß√µes que n√£o precisam do banco
    // O banco tentar√° se reconectar nas pr√≥ximas solicita√ß√µes
  }
}